{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onClick","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","send","onerror","e","console","log","loadTweets","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","uselike","userLike","setUserLike","actionDisplay","display","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","tweetsEl"],"mappings":"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","file":"static/js/main.95cea251.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\n\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props){\n    const textAreaRef = React.createRef()\n    const [newTweets,setNewTweets] = useState([])\n    const handleSubmit = (event)=>{\n        event.preventDefault()\n        const newVal= textAreaRef.current.value\n        let tempNewTweets=[...newTweets]\n        //change this to a server side call\n        tempNewTweets.unshift({\n            content:newVal,\n            likes:0,\n            id:12312\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value=''\n    }\n    return <div className={props.className}>\n            <div className='col-12 mb-3 '>\n                <form className={props.className} onClick={handleSubmit}>\n                    <textarea ref={textAreaRef} required={true}className='form-control' name='tweet'> \n                    </textarea>\n                    <button type='submit' className='btn btn-primary my- 3'>Tweet</button>\n                </form>\n            </div>\n            <TweetsList newTweets={newTweets}/>\n        </div>\n}\n\n\nexport function TweetsList(props){\n    const [tweetsInit] = useState([])\n    const [tweets,setTweets] = useState([])\n    useEffect(()=>{\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n    },[props.newTweets, tweets, tweetsInit])\n    useEffect(()=>{\n      const myCallBack= (response,status)=>{\n        console.log(response,status)\n        if (status===201){\n          setTweets(response)\n        }\n        else{\n          console.log(\"There was an Error\")\n  \n        }\n      }\n      loadTweets(myCallBack)\n    },[])\n       return tweets.map((item,index)=>{\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n       })\n    \n  }\n  \n  export function ActionBtn(props) {\n      const {tweet,action}=props\n      const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n      const [userLike, setUserLike] = useState(tweet.uselike === true ?true:false)\n      const className = props.className? props.className : \"btn btn-secondary btn-sm\"\n      const actionDisplay = action.display? action.display:'Action'\n      \n      const handleClick = (event)=>{\n          event.preventDefault()\n          if(action.type==='like')\n          {\n              if(userLike=== true){\n                  //perhaps i Unlike it?\n                  setLikes(likes-1)\n                  setUserLike(false)\n              }\n              else{\n                setLikes(tweet.likes+1)\n                setUserLike(true)\n              }\n            \n          }\n      }\n      const display = action.type === \"like\" ? `${likes} ${actionDisplay}`: actionDisplay\n      return <button className={className} onClick={handleClick}>  {display} </button> \n    }\n    \n  export function Tweet(props){\n      const {tweet}=props\n      const className = props.className? props.className : 'col-10 mx-auto col-md-6'\n      return <div className={className}> \n        \n        <p>{tweet.id} - {tweet.content} </p>\n        <div className=\"btn btn-group\">\n          <ActionBtn tweet={tweet} action={{type:\"like\",display:\"Likes\"}} />\n          <ActionBtn tweet={tweet} action={{type:\"unlike\",display:\"Unlike\"}} />\n          <ActionBtn tweet={tweet} action={{type:\"retweet\",display:\"Retweet\"}} />\n        </div>\n      </div>\n    }\n    \n  ","\nexport function loadTweets(callback) {\n  const xhr = new XMLHttpRequest()\n  const method = 'GET' // \"POST\"\n  const url = \"http://localhost:8000/api/tweets/\"\n  const responseType = \"json\"\n  xhr.responseType = responseType\n  xhr.open(method, url)\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.send()\n  xhr.onerror=function(e){\n    console.log(e)\n    callback({\"message\":\"the request was faulty\"}, 400)\n  } \n}\n","import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from './tweets'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nconst tweetsEl = document.getElementById('tweetme')\nif (tweetsEl)\n{\n  ReactDOM.render(<TweetsComponent/>, tweetsEl )\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}